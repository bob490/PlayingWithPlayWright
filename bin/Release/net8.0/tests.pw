func test_arithmetic():
    print("##### TESTING ARITHMETIC FUNCTIONALITY #####");
    print(str(2+2)); # 4
    print(str(3/4)); # 0.75
    print(str(2+2*0.75)); # 3.5
    print(str(10/200*2)); # 0.1
    # PASS
end

func test_instantiation():
    print("##### TESTING ACTOR INSTANTIATION #####");
    enter ronnie as actor("ronnie");
    print(str(ronnie));
    # PASS
end

func test_return():
    print("##### TESTING RETURN FUNCTIONALITY #####");
    func ret_func(arg):
        exeunt with arg * 2;
    end
    print(str(ret_func(2))); 
    # PASS
end

func test_external_calls(example_actor):
    print("##### THIS IS BEING CALLED EXTERNALLY #####");
    print(example_actor: name); # should print whatever name the actor originally had.
    example_actor:name = "test name"; # sets the name of the actor to "test name".
    print(example_actor: name); # should be "test name"
    # PASS
end

func test_relational_and_equality():
    print ("##### TESTING EQUALITIES AND RELATIONS ######");
    print (str(2==2)); # True
    print (str(2==1)); # False
    print (str(2!=1)); # True    
    print (str(2!=2)); # False
    
    print (str("hello"=="hello")); # True
    print (str("hello"=="goodbye")); # False
    
    print (str(2 > 1)); # True
    print (str(2 > 3)); # False
    print (str(2 >= 2)); # True
   
    print (str(1.5 >= 2)); # False 
    
    print (str(1 < 2)); # True
    print (str(3 < 2)); # False
    print (str(2 <= 2)); # True 
    print (str(2.5 <= 2)); # False
    
    # PASS
end

func test_string_concatenation():
    print("##### TESTING STRING CONCATENATION OPERATORS #####");
    print("hello, " + "world!"); # "hello, world!"
    print("the quick brown fox jumps over the lazy dog..." - " lazy"); # the quick brown fox jumps over the dog
end

test_arithmetic();
test_instantiation();
test_return();
test_relational_and_equality();
test_string_concatenation();
assert("2+2", 4);